namespace AdventOfCode2024.Tests;

public class Day14Tests
{
    [Test]
    [Arguments("p=0,0 v=0,0", 5, 5, """
                                    1....
                                    .....
                                    .....
                                    .....
                                    .....
                                    """)]
    [Arguments("p=1,0 v=0,0", 5, 5, """
                                    .1...
                                    .....
                                    .....
                                    .....
                                    .....
                                    """)]
    [Arguments("p=0,1 v=0,0", 5, 5, """
                                    .....
                                    1....
                                    .....
                                    .....
                                    .....
                                    """)]
    [Arguments("p=1,1 v=0,0", 5, 5, """
                                    .....
                                    .1...
                                    .....
                                    .....
                                    .....
                                    """)]
    [Arguments("p=10,0 v=0,0", 11, 11, """
                                       ..........1
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       """)]
    [Arguments("p=0,10 v=0,0", 11, 11, """
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       ...........
                                       1..........
                                       """)]
    [Arguments("""
               p=0,0 v=0,0
               p=0,0 v=0,0
               """, 5, 5, """
                          2....
                          .....
                          .....
                          .....
                          .....
                          """)]
    [Arguments("""
               p=0,0 v=0,0
               p=1,0 v=0,0
               """, 5, 5, """
                          11...
                          .....
                          .....
                          .....
                          .....
                          """)]
    // Example input
    [Arguments("p=2,4 v=2,-3", 11, 7, """
                                      ...........
                                      ...........
                                      ...........
                                      ...........
                                      ..1........
                                      ...........
                                      ...........
                                      """)]
    public async Task Shows_string_representation_of_grid_in_initial_state(string input, int gridWidth, int gridHeight, string expected)
    {
        await Assert.That(new Day14(input, gridWidth, gridHeight).ToString()).IsEqualTo(expected);
    }

    [Test]
    // Move right one spot
    [Arguments("p=0,0 v=1,0", 5, 5, 1, """
                                       .1...
                                       .....
                                       .....
                                       .....
                                       .....
                                       """)]
    // Move right two spots after two seconds
    [Arguments("p=0,0 v=1,0", 5, 5, 2, """
                                       ..1..
                                       .....
                                       .....
                                       .....
                                       .....
                                       """)]
    // Move right one spot, teleporting to upper-left-most spot
    [Arguments("p=4,0 v=1,0", 5, 5, 1, """
                                       1....
                                       .....
                                       .....
                                       .....
                                       .....
                                       """)]
    // Move left one spot, teleporting to upper-right-most spot
    [Arguments("p=0,0 v=-1,0", 5, 5, 1, """
                                        ....1
                                        .....
                                        .....
                                        .....
                                        .....
                                        """)]
    // Move up one spot
    [Arguments("p=0,4 v=0,-1", 5, 5, 1, """
                                        .....
                                        .....
                                        .....
                                        1....
                                        .....
                                        """)]
    // Move up one spot, teleporting to bottom-left-most spot
    [Arguments("p=0,0 v=0,-1", 5, 5, 1, """
                                        .....
                                        .....
                                        .....
                                        .....
                                        1....
                                        """)]
    // Example input after 1 second
    [Arguments("p=2,4 v=2,-3", 11, 7, 1, """
                                         ...........
                                         ....1......
                                         ...........
                                         ...........
                                         ...........
                                         ...........
                                         ...........
                                         """)]
    // Example input after 5 seconds
    [Arguments("p=2,4 v=2,-3", 11, 7, 5, """
                                         ...........
                                         ...........
                                         ...........
                                         .1.........
                                         ...........
                                         ...........
                                         ...........
                                         """)]
    // Example input with multiple robots after 100 seconds
    [Arguments("""
               p=0,4 v=3,-3
               p=6,3 v=-1,-3
               p=10,3 v=-1,2
               p=2,0 v=2,-1
               p=0,0 v=1,3
               p=3,0 v=-2,-2
               p=7,6 v=-1,-3
               p=3,0 v=-1,-2
               p=9,3 v=2,3
               p=7,3 v=-1,2
               p=2,4 v=2,-3
               p=9,5 v=-3,-3
               """, 11, 7, 100, """
                                ......2..1.
                                ...........
                                1..........
                                .11........
                                .....1.....
                                ...12......
                                .1....1....
                                """)]
    public async Task Shows_string_representation_of_grid_after_tick(string input, int gridWidth, int gridHeight, int tickCount, string expected)
    {
        var sut = new Day14(input, gridWidth, gridHeight);

        for (int i = 1; i <= tickCount; i++)
        {
            sut.Tick();
        }

        await Assert.That(sut.ToString()).IsEqualTo(expected);
    }

    [Test]
    [Arguments("""
               222
               222
               222
               """, 16)]
    [Arguments("""
               .2.
               222
               .2.
               """, 0)]
    [Arguments("""
               ......2..1.
               ...........
               1..........
               .11........
               .....1.....
               ...12......
               .1....1....
               """, 12)]
    public async Task Calculates_safety_factor(string grid, int expected)
    {
        int safetyFactor = Day14.CalculateSafetyFactor(grid.ToTwoDimensionalArray<int>());

        await Assert.That(safetyFactor).IsEqualTo(expected);
    }

    [Test]
    public async Task Solves_part_1()
    {
        var sut = new Day14(await File.ReadAllTextAsync("Day14.txt"), 101, 103);

        for (int i = 1; i <= 100; i++)
        {
            sut.Tick();
        }

        int safetyFactor = sut.CalculateSafetyFactor();

        await Assert.That(safetyFactor).IsEqualTo(231221760);
    }

    [Test]
    public async Task Solves_part_2()
    {
        var sut = new Day14(await File.ReadAllTextAsync("Day14.txt"), 101, 103);

        for (int i = 1;; i++)
        {
            sut.Tick();

            string grid = sut.ToString();

            const string maybePartOfTree = "1111111111";

            if (grid.Contains(maybePartOfTree))
            {
                await Assert.That(i).IsEqualTo(6771);
                break;
            }
        }
    }
}